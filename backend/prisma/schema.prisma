generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            String              @id @default(uuid()) @map("user_id") @db.VarChar(50)
  username          String              @unique @db.VarChar(50)
  email             String              @unique @db.VarChar(50)
  fullName          String              @map("full_name") @db.VarChar(100)
  password          String              @db.VarChar(255)
  isEmailVerified   Boolean             @default(false) @map("is_email_verified")
  profilePicture    String              @default("") @map("profile_picture")
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  emailVerification EmailVerification[] @relation("UserEmailVerification")
  messages          Message[]           @relation("UserMessages")
  userChatRoom      UserChatRoom[]      @relation("UserUserChatRoom")

  @@map("users")
}

model ChatRoom {
  chatRoomId    String    @id @default(uuid()) @map("chat_room_id") @db.VarChar(50)
  createdAt     DateTime  @default(now()) @map("created_at")
  messages      Message[] @relation("ChatRoomMessages")
  userChatRoom  UserChatRoom[] @relation("ChatRoomUserChatRoom")

  @@map("chat_room")
}

model Message {
  messageId  String   @id @default(uuid()) @map("message_id") @db.VarChar(50)
  text       String?
  image      String?
  createdAt  DateTime @default(now()) @map("created_at")
  userId     String   @map("user_id") @db.VarChar(50)
  chatRoomId String   @map("chat_room_id") @db.VarChar(50)
  chatRoom   ChatRoom @relation("ChatRoomMessages", fields: [chatRoomId], references: [chatRoomId])
  user       User     @relation("UserMessages", fields: [userId], references: [userId])

  @@map("messages")
}

model EmailVerification {
  emailVerificationId String   @id @default(uuid()) @map("email_verification_id") @db.VarChar(50)
  token               String   @unique @db.VarChar(50)
  expirationDate      DateTime
  createdAt           DateTime @default(now()) @map("created_at")
  userId              String   @map("user_id") @db.VarChar(50)
  user                User     @relation("UserEmailVerification", fields: [userId], references: [userId])

  @@map("email_verification")
}

model UserChatRoom {
  userId     String   @map("user_id") @db.VarChar(50)
  chatRoomId String   @map("chat_room_id") @db.VarChar(50)
  chatRoom   ChatRoom @relation("ChatRoomUserChatRoom", fields: [chatRoomId], references: [chatRoomId])
  user       User     @relation("UserUserChatRoom", fields: [userId], references: [userId])

  @@id([userId, chatRoomId])
  
  @@map("user_chat_room")
}